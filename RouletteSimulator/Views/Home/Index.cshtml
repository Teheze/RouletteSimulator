@{
    ViewData["Title"] = "Main Page -";
}

<div class="bg-white rounded-4 bg-opacity-3 index">
    <div id="countdown-container">
        <div id="progress-bar">
            <div id="progress-bar-fill"></div>
        </div>
        <div id="countdown">20 seconds</div>
    </div>

    <div id="coinsDisplay">Loading coins...</div>

    <input type="number" class="amountInput" id="betAmount" value="10" min="1" step="1" style="margin-top: 20px;" />
    <button class="amountButton" onclick="changeBetAmount('CLEAR')">CLEAR</button>
    <button class="amountButton" onclick="changeBetAmount('+10')">+10</button>
    <button class="amountButton" onclick="changeBetAmount('+100')">+100</button>
    <button class="amountButton" onclick="changeBetAmount('+1000')">+1000</button>
    <button class="amountButton" onclick="changeBetAmount('1/2')">1 / 2</button>
    <button class="amountButton" onclick="changeBetAmount('X2')">X2</button>
    <button class="amountButton" onclick="changeBetAmount('MAX')">MAX</button>
    
    <div id="lastResults" style="text-align: center; margin-top: 20px; display: flex; justify-content:space-around;">Loading last results...</div>

</div>

<div class="bg-white rounded-4 bg-opacity-3 index place-bet" id="place-bet">
    <button class="place-bet-button" id="place-bet-red" onclick="placeBet('red')">Bet Red</button>
    <button class="place-bet-button" id="place-bet-black" onclick="placeBet('black')">Bet Black</button>
    <button class="place-bet-button" id="place-bet-green" onclick="placeBet('green')">Bet Green</button>
</div>

<div class="bg-white rounded-4 bg-opacity-3 index" style="display: flex; justify-content: space-around;">
    <div id="betInfoRed">Bets = 0, Total = 0</div>
    <div id="betInfoBlack">Bets = 0, Total = 0</div>
    <div id="betInfoGreen">Bets = 0, Total = 0</div>
</div>
@section Scripts
{
    <script>
        async function changeBetAmount(action) {
            let currentAmount = parseInt(document.getElementById('betAmount').value);
            switch (action) {
                case 'CLEAR':
                    currentAmount = 0;
                    break;
                case '+10':
                    currentAmount += 10;
                    break;
                case '+100':
                    currentAmount += 100;
                    break;
                case '+1000':
                    currentAmount += 1000;
                    break;
                case '1/2':
                    currentAmount = Math.floor(currentAmount / 2);
                    break;
                case 'X2':
                    currentAmount *= 2;
                    break;
                case 'MAX':
                    const coins = await fetch('/api/rouletteapi/coins');
                    const maxCoins = await coins.json();
                    currentAmount = maxCoins;
                    break;
            }
            document.getElementById('betAmount').value = currentAmount;
        }

        async function fetchCoins() {
            try {
                const coinsResponse = await fetch('/api/rouletteapi/coins');
                if (!coinsResponse.ok) {
                    throw new Error("Failed to fetch coins.");
                }
                const coinsJson = await coinsResponse.json();
                document.getElementById('coinsDisplay').innerText = `Balance: ${coinsJson}`;
            } catch (error) {
                console.error("Error fetching coins:", error);
            }
        }

        async function setupCoinPolling() {
            await fetchCoins();
            setInterval(fetchCoins, 5000);
        }
        document.addEventListener('DOMContentLoaded', setupCoinPolling);

        async function fetchLastResults() {
            const resultsResponse = await fetch('/api/rouletteapi/last-10');
            if (resultsResponse.ok) {
                const resultsJson = await resultsResponse.json();
                let resultsHtml = '';
                resultsJson.forEach(result => {
                    resultsHtml += `<div style="background-color:${result.resultColor};
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    padding:5px;
                    border-radius: 50%;
                    margin:2px;
                    width:50px;
                    height:50px;">${result.result}</div>`;
                });
                document.getElementById('lastResults').innerHTML = resultsHtml;
            } else {
                alert("Failed to fetch last results.");
            }
        }

        async function placeBet(type) {
            const amount = parseInt(document.getElementById('betAmount').value);
            const bet = {
                BetType: type,
                Amount: amount,
            };

            const response = await fetch('/api/rouletteapi/bet', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(bet)
            });

            if (response.ok) {
                const resultJson = await response.json();
                await fetchCoins();
                await fetchLastResults();
                await fetchBetInfo();
            } else {
                const errorText = await response.text();
                alert(`${errorText}`);
            }
        }

        async function fetchBetInfo() {
            try {
                const response = await fetch('/api/rouletteapi/current-bets');
                if (response.ok) {
                    const data = await response.json();
                    console.log("Fetched Bet Data:", data); // For debugging

                    const betSummary = data;
                    let redBetCount = 0, redTotalAmount = 0;
                    let blackBetCount = 0, blackTotalAmount = 0;
                    let greenBetCount = 0, greenTotalAmount = 0;

                    betSummary.forEach(bet => {
                        if (bet.betType === 'red') {
                            redBetCount = bet.betCount;
                            redTotalAmount = bet.totalAmount;
                        } else if (bet.betType === 'black') {
                            blackBetCount = bet.betCount;
                            blackTotalAmount = bet.totalAmount;
                        } else if (bet.betType === 'green') {
                            greenBetCount = bet.betCount;
                            greenTotalAmount = bet.totalAmount;
                        }
                    });

                    document.getElementById('betInfoRed').innerText = `Bets = ${redBetCount}, Total = ${redTotalAmount}`;
                    document.getElementById('betInfoBlack').innerText = `Bets = ${blackBetCount}, Total = ${blackTotalAmount}`;
                    document.getElementById('betInfoGreen').innerText = `Bets = ${greenBetCount}, Total = ${greenTotalAmount}`;
                } else {
                    console.error('Failed to fetch bet information:', response.statusText);
                }
            } catch (error) {
                console.error('Error fetching bet information:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', fetchBetInfo);

        async function fetchNextDrawTime() {
            const response = await fetch('/api/rouletteapi/next-draw');
            if (response.ok) {
                const nextDrawTime = await response.json();
                return new Date(nextDrawTime);
            } else {
                alert('Failed to fetch next draw time.');
                return new Date();
            }
        }

        async function startCountdown() {
            let nextDrawTime = await fetchNextDrawTime();
            const initialTime = Math.floor((nextDrawTime - new Date()) / 1000);
            const progressBarFill = document.getElementById('progress-bar-fill');

            setInterval(async () => {
                const now = new Date();
                let timeRemaining = Math.floor((nextDrawTime - now) / 1000);

                if (timeRemaining <= 0) {
                    nextDrawTime = await fetchNextDrawTime();
                    timeRemaining = Math.floor((nextDrawTime - now) / 1000);
                    await fetchLastResults();
                }

                document.getElementById('countdown').innerText = `${timeRemaining} seconds`;

                // Update the progress bar
                const progressPercentage = (timeRemaining / 18) * 100;
                progressBarFill.style.width = `${progressPercentage}%`;
            }, 1000);
        }
        document.addEventListener('DOMContentLoaded', async () => {
            await fetchCoins();
            await fetchLastResults();
            await fetchBetInfo();
            await startCountdown();
            setInterval(fetchBetInfo, 1000);
        });
    </script>
}
